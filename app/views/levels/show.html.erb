<div class="row-fluid">
  <div class="span11" id='game'>
  </div>
  <div class="span1">
    <p>
		  Level: <%= @level.id %>
    </p>
    <p>
		  Score: <span id='score'>0</span>
    </p>
    <p>
		  Keys: <span id='keys'></span>
    </p>
    <div id ='log'>
    </div>
  </div>
</div>

<script>

  init();
  loadLevel();
  buildGeometry();
  animate();

	function loadLevel() {

		// Initialise level data
		Level.addBlocks(<%= @level.blocks.to_json %>);
		Level.block_texture = "<%= @level.theme.texture_block %>";
		
  }

	function buildGeometry() {
		
		// Add player
		Player.addToScene(scene);

		// Skybox
		sky_material = new THREE.MeshBasicMaterial({map: THREE.ImageUtils.loadTexture("<%= @level.theme.texture_sky %>")});
		geometry = new THREE.SphereGeometry(18000, 16, 16);
		sky = new THREE.Mesh( geometry, sky_material );
		sky.scale.y = -1;
		scene.add( sky );

		// Blocks
		Level.addToScene(scene);

		// Initialise player coordinate frame position
		current_block = new THREE.Vector3(<%=@level.start['position'][0]%>, <%=@level.start['position'][1]%>, <%=@level.start['position'][2]%>)
		current_surface = 'T';
		Player.position.position = current_block.clone().multiplyScalar(block_size);

		// Debug info
		if (debug) {
	        geometry = new THREE.SphereGeometry(ball_radius*1.1, 16, 16);
	        material = new THREE.MeshBasicMaterial({wireframe: true, color: 0xFF0000});
			surface_highlight = new THREE.Mesh( geometry, material );
			scene.add( surface_highlight );
	        geometry = new THREE.CubeGeometry( block_size*1.01, block_size*1.01, block_size*1.01 );
	        material = new THREE.MeshBasicMaterial({wireframe: true});
			highlight = new THREE.Mesh( geometry, material );
			scene.add( highlight );
			Utility.update_debug_info();
		}
		
		// Add Entities
		<% @level.entities.each do |entity| %>
			new_entity = new Entity();
			new_entity.geometry_code = "<%= escape_javascript(Entity.find_by_name(entity['type']).mesh) %>";
			new_entity.animate_code = "<%= escape_javascript(Entity.find_by_name(entity['type']).animate) %>";
			new_entity.collide_code = "<%= escape_javascript(Entity.find_by_name(entity['type']).collide) %>";
			new_entity.pickup = <%= Entity.find_by_name(entity['type']).pickup %>;
			new_entity.position = new THREE.Vector3(<%= entity['position'][0] %>, <%= entity['position'][1] %>, <%= entity['position'][2] %>);
		  new_entity.addToScene(scene);
			entities.push(new_entity);
			<%= "Level.keys_required += 1;" if entity['type'] == "Key" %>
		<% end %>
		
		Level.updateKeyDisplay();

		// Ball
		texture = THREE.ImageUtils.loadTexture("<%= @level.theme.texture_ball %>")
		texture.minFilter = THREE.LinearFilter;
		texture.magFilter = THREE.NearestFilter;
		ball_material = new THREE.MeshBasicMaterial({map: texture});
		geometry = new THREE.SphereGeometry(ball_radius, 16, 16);
		ball = new THREE.Mesh( geometry, ball_material );
		ball.position.y = block_size/2 + ball_radius;
		Player.rotation.add( ball );
		
		// Position camera
    camera = new THREE.PerspectiveCamera( 75, viewport_x/viewport_y, 0.1, 20000 );
    camera.position = ball.position.clone().addSelf(Player.up.clone().multiplyScalar(0.5)).addSelf(Player.forward.clone().multiplyScalar(-0.8));
		camera.lookAt( ball.position.clone().addSelf(Player.up.clone().multiplyScalar(ball_radius * 2)) );
    Player.rotation.add( camera );

	}

	function levelComplete() {
		if (Level.gotAllKeys() == true) {
		  Utility.log("LEVEL COMPLETE");
		  jQuery.ajax('<%= world_level_scores_path(@world, @level) %>',{
										type: 'POST',
										data: {score: Level.score}
									});
		}
	}



</script>