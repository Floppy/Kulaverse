<div class="row-fluid">
  <div class="span11" id='game'>
  </div>
  <div class="span1">
    <p>
		  Level: <%= @level.id %>
    </p>
    <p>
		  Score: 0
    </p>
    <p>
		  Keys: 0
    </p>
    <div id ='log'>
    </div>
  </div>
</div>

<script>

    var camera, scene, renderer, ball, ball_radius, keyboard, action_status, action_remaining, camera_offset;
	var player_right, player_up, player_forward;
	var player;
	var block_size;
	var highlight;
	var surface_highlight;
	var current_block;
	var current_surface;
	var debug = false;
	var block_list = {};
	var viewport_x, viewport_y;

	// Used for rotating upwards
	var player_up_temp = null;
	var player_forward_temp = null;

    init();
	buildGeometry();
    animate();

    function init() {
		
		action_status = null;
		
		block_size = 1;
		ball_radius = block_size * 0.1;

		player_right = new THREE.Vector3(1,0,0);
		player_up = new THREE.Vector3(0,1,0);
		player_forward = new THREE.Vector3(0,0,-1);

		keyboard = new THREEx.KeyboardState();

		scene = new THREE.Scene();

		player_pos = new THREE.Object3D();
		player_rot = new THREE.Object3D();
		player_pos.add(player_rot);
		scene.add(player_pos);

		var container = $('#game');
		renderer = new THREE.WebGLRenderer();
		viewport_x = container.width();
		viewport_y = window.innerHeight - container.position().top - 20;
		renderer.setSize( viewport_x, viewport_y );
		container.append( renderer.domElement );

		// Create block list
		<% @level.blocks.each do |block| %>
			block_list["<%= block[0] %>:<%= block[1] %>:<%= block[2] %>"] = [<%= block[0] %>, <%= block[1] %>, <%= block[2] %>];
		<% end %>

		if (debug) {
			logVector("rght", player_right);
			logVector("up", player_up);
			logVector("fwd", player_forward);
		}

    }

	function buildGeometry() {
		
		// Skybox
		sky_material = new THREE.MeshBasicMaterial({map: THREE.ImageUtils.loadTexture("<%= @level.theme.texture_sky %>")});
		geometry = new THREE.SphereGeometry(18000, 16, 16);
		sky = new THREE.Mesh( geometry, sky_material );
		sky.scale.y = -1;
		scene.add( sky );

		// Blocks
		geometry = new THREE.CubeGeometry( block_size, block_size, block_size );
		texture = THREE.ImageUtils.loadTexture("<%= @level.theme.texture_block %>")
		texture.minFilter = THREE.LinearFilter;
		texture.magFilter = THREE.NearestFilter;
		block_material = new THREE.MeshBasicMaterial({map: texture});
		for (var block in block_list) {
			mesh = new THREE.Mesh( geometry, block_material );
			mesh.position.x = block_list[block][0] * block_size;
			mesh.position.y = block_list[block][1] * block_size;
			mesh.position.z = block_list[block][2] * block_size;
			scene.add( mesh );
		}

		// Initialise player coordinate frame position
		current_block = new THREE.Vector3(<%=@level.start[:position][0]%>, <%=@level.start[:position][1]%>, <%=@level.start[:position][2]%>)
		current_surface = 'T';
		player_pos.position = current_block.clone().multiplyScalar(block_size);

		// Debug info
		if (debug) {
	        geometry = new THREE.SphereGeometry(ball_radius*1.1, 16, 16);
	        material = new THREE.MeshBasicMaterial({wireframe: true, color: 0xFF0000});
			surface_highlight = new THREE.Mesh( geometry, material );
			scene.add( surface_highlight );
	        geometry = new THREE.CubeGeometry( block_size*1.01, block_size*1.01, block_size*1.01 );
	        material = new THREE.MeshBasicMaterial({wireframe: true});
			highlight = new THREE.Mesh( geometry, material );
			scene.add( highlight );
			update_debug_info();
		}
		
		// Add Exit
		<%= @level.finish[:object].mesh %>
	    scene.add(mesh);
		mesh.position = new THREE.Vector3(<%= @level.finish[:position][0] %>, <%= @level.finish[:position][1] %>+1, <%= @level.finish[:position][2] %>);

		// Ball
		texture = THREE.ImageUtils.loadTexture("<%= @level.theme.texture_ball %>")
		texture.minFilter = THREE.LinearFilter;
		texture.magFilter = THREE.NearestFilter;
		ball_material = new THREE.MeshBasicMaterial({map: texture});
		geometry = new THREE.SphereGeometry(ball_radius, 16, 16);
		ball = new THREE.Mesh( geometry, ball_material );
		ball.position.y = block_size/2 + ball_radius;
		player_rot.add( ball );
		
		// Position camera
        camera = new THREE.PerspectiveCamera( 75, viewport_x/viewport_y, 0.1, 20000 );
		camera.position = ball.position.clone().addSelf(player_up.clone().multiplyScalar(ball_radius * 2.5)).addSelf(player_forward.clone().multiplyScalar(ball_radius * -7));
		camera.lookAt( ball.position.clone().addSelf(player_up.clone().multiplyScalar(ball_radius * 2)) );
        player_rot.add( camera );

	}

	function isBlockAt(vector) {
		 if (debug)
		 	log("block query "+vector.x+","+vector.y+","+vector.z+": " + (block_list[vector.x+":"+vector.y+":"+vector.z] != null));
		return block_list[vector.x+":"+vector.y+":"+vector.z];
	}
	
	function makeInteger(vector) {
		vector.x = Math.floor(vector.x+0.5);
		vector.y = Math.floor(vector.y+0.5);
		vector.z = Math.floor(vector.z+0.5);
	}
	
	function logVector(name, vector) {
		log(name + ": " + vector.x + "," + vector.y + "," + vector.z);
	}

	function translatePlayer(vector) {
		r = new THREE.Matrix4();
		r.setTranslation(vector.x, vector.y, vector.z);
		player_pos.applyMatrix(r);
	}

	function rotatePlayer(axis, angle) {
		r = new THREE.Matrix4();
		r.identity();
		r.setRotationAxis(axis, angle);
		player_right = r.multiplyVector3(player_right);
		player_up = r.multiplyVector3(player_up);
		player_forward = r.multiplyVector3(player_forward);
		player_rot.applyMatrix(r);
	}

    function animate() {

        // note: three.js includes requestAnimationFrame shim
        requestAnimationFrame( animate );

		if (action_status == null) {
			// Detect keyboard presses unless an action is in progress
			if (keyboard.pressed("up")) {
				// Check if we are allowed to go forward
				if ( isBlockAt(	current_block.clone().addSelf(player_forward)) && 
 					!isBlockAt(	current_block.clone().addSelf(player_forward).addSelf(player_up))) {
					action_status = "forward";
					action_left = 1.0;
				}
				else if ( isBlockAt(current_block.clone().addSelf(player_forward).addSelf(player_up)) && 
						 !isBlockAt(current_block.clone().addSelf(player_forward).addSelf(player_up).addSelf(player_right)) && 
   						 !isBlockAt(current_block.clone().addSelf(player_forward).addSelf(player_up).subSelf(player_right))) {
					action_status = "change_plane_up";
					player_up_temp = player_up.clone();
					player_forward_temp = player_forward.clone();
					action_left = 1.0;
				}
				else if (!isBlockAt(current_block.clone().addSelf(player_forward).addSelf(player_up)) && 
   						 !isBlockAt(current_block.clone().addSelf(player_forward)) && 
						 !isBlockAt(current_block.clone().addSelf(player_right)) && 
   						 !isBlockAt(current_block.clone().subSelf(player_right))) {
					action_status = "change_plane_down";
					action_left = 1.0;
				}
			}
			else if (keyboard.pressed("left")) {
				action_status = "turn_left";
				action_left = 1.0;
			}
			else if (keyboard.pressed("right")) {
				action_status = "turn_right";
				action_left = 1.0;
			}
			else if (keyboard.pressed("down")) {
				action_status = "turn_around";
				action_left = 1.0;
			}
			else if (keyboard.pressed("space")) {
				action_status = "jump";
				action_left = 1.0;
			}
			if (action_status && debug)
				log(action_status);
		}
		else {
			// Perform the action
			if (action_status == "forward") {
				translatePlayer(player_forward.clone().multiplyScalar(block_size*0.1));
				ball.rotation.x -= 0.2;
			}
			else if (action_status == "change_plane_up") {
				// Move player frame
				translatePlayer(player_forward_temp.clone().addSelf(player_up_temp).multiplyScalar(block_size*0.1));
				// Rotate player frame
				angle = (Math.PI / 2.0) * 0.1;
				rotatePlayer(player_right, angle);
				// Roll
				ball.rotation.x -= 0.1;
			}
			else if (action_status == "change_plane_down") {
				// Rotate player frame
				angle = -(Math.PI / 2.0) * 0.1;
				rotatePlayer(player_right, angle);
				// Roll
				ball.rotation.x -= 0.2;
			}
			else if (action_status == "turn_left") {
				// Rotate player frame
				angle = (Math.PI / 2.0) * 0.1;
				rotatePlayer(player_up, angle);
			}
			else if (action_status == "turn_right") {
				// Rotate player frame
				angle = -(Math.PI / 2.0) * 0.1;
				rotatePlayer(player_up, angle);
			}
			else if (action_status == "turn_around") {
				// Rotate player frame
				angle = Math.PI * 0.1;
				rotatePlayer(player_up, angle);
			}
			else if (action_status == "jump") {
				ball.position.y += (block_size/2)*(action_left-0.55);
			} 
			action_left -= 0.1;
			if (action_left <= 0.1) {
				update_debug_info();
				// Round off vectors
				makeInteger(player_right);
				makeInteger(player_up);
				makeInteger(player_forward);
				if (debug) {
					logVector("rght", player_right);
					logVector("up", player_up);
					logVector("fwd", player_forward);
				}
				// clear action status
				action_status = null;
				action_left = 0;
			}
		}
		// Update current block
		previous_block = current_block.clone();
		current_block.x = Math.floor(player_pos.position.x + 0.5);
		current_block.y = Math.floor(player_pos.position.y + 0.5);
		current_block.z = Math.floor(player_pos.position.z + 0.5);

		// If block has changed
		if (current_block.x != previous_block.x || 
			current_block.y != previous_block.y ||
			current_block.z != previous_block.z) {
		    // Check for collisions
			if (current_block.x == <%= @level.finish[:position][0] %> && 
				current_block.y == <%= @level.finish[:position][1] %> && 
				current_block.z == <%= @level.finish[:position][2] %>) {
				<%= @level.finish[:object].collide %>
			}
		}
		
        render();

    }

	function update_debug_info()
	{
		if (!debug)
			return;
		// Update highlight
		highlight.position = current_block;
		surface_highlight.position = current_block.clone().addSelf(player_up.clone().multiplyScalar(0.85));
	}

    function render() {
		
		// Render scene
        renderer.render( scene, camera );

    }

	function levelComplete() {
		log("LEVEL COMPLETE");
	}
	
	function log(string) {
		$("#log").prepend(string+'<br/>');
	}

</script>