<script>

    var camera, scene, renderer, ball, direction, ball_radius, keyboard, action_status, action_remaining, camera_offset;

    init();
	buildGeometry();
    animate();

    function init() {
		
		action_status = null;
		ball_radius = 75;
		direction = new THREE.Vector3(1,0,0);

		keyboard = new THREEx.KeyboardState();

        scene = new THREE.Scene();

		camera_offset = new THREE.Vector3(1000, -500, 0);

        camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );
        scene.add( camera );

        renderer = new THREE.CanvasRenderer();
        renderer.setSize( window.innerWidth, window.innerHeight );

        document.body.appendChild( renderer.domElement );

    }

	function buildGeometry() {
		
		block_size = 200;

        material = new THREE.MeshNormalMaterial();
        geometry = new THREE.CubeGeometry( block_size, block_size, block_size );
		
		<%= @level.blocks.each do |block_data| %>
			mesh = new THREE.Mesh( geometry, material );
			mesh.position.x = <%= block_data[0] %> * block_size;
			mesh.position.y = <%= block_data[1] %> * block_size;
			mesh.position.z = <%= block_data[2] %> * block_size;
			scene.add( mesh );
		<% end %>

		geometry = new THREE.SphereGeometry(ball_radius, 16, 16);
		ball = new THREE.Mesh( geometry, material );
		ball.position.x = -1 * block_size;
		ball.position.y = (0 * block_size) + block_size/2 + ball_radius;
		ball.position.z = 1 * block_size;
		scene.add( ball );

	}

    function animate() {

        // note: three.js includes requestAnimationFrame shim
        requestAnimationFrame( animate );

		if (action_status == null) {
			// Detect keyboard presses unless an action is in progress
			if (keyboard.pressed("up")) {
				action_status = "forward";
				action_left = 1.0;
			}
		}
		else {
			// Perform the action
			if (action_status == "forward") {
				action_left -= 0.1;
				ball.position.addSelf(direction.clone().multiplyScalar(200*0.1));
				ball.rotation.z -= 0.2;
			}
			if (action_left <= 0.0) {
				action_status = null;
			}
		}

		

        render();

    }

    function render() {
		
		camera.position = ball.position.clone();
		camera.position.subSelf(camera_offset);

		camera.lookAt( ball.position );

        renderer.render( scene, camera );

    }

</script>